/*{
	"type": "action",
	"targets": ["omnigraffle"],
	"author": "Nick Main",
	"identifier": "isdfbhsd9890s8dfsjkdf",
	"version": "0.1",
	"description": "Hello world from Haxe",
	"label": "Haxe Hello",
	"paletteLabel": "HX Hello"
}*/

(() => {
    var exports = {};

    // Generated by Haxe 4.2.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["samples"] = $hx_exports["samples"] || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var epistem_omni_graffle_Action = function() {
};
epistem_omni_graffle_Action.prototype = {
	validate: function(selection,sender) {
		return true;
	}
};
var epistem_omni_graffle_Globals = function() { };
epistem_omni_graffle_Globals.get_app = function() {
	return app;
};
epistem_omni_graffle_Globals.get_console = function() {
	return console;
};
epistem_omni_graffle_Globals.get_document = function() {
	return document;
};
epistem_omni_graffle_Globals.get_thisPlugin = function() {
	return $global;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var samples_HelloWorld = $hx_exports["samples"]["HelloWorld"] = function() {
	epistem_omni_graffle_Action.call(this);
};
samples_HelloWorld.__super__ = epistem_omni_graffle_Action;
samples_HelloWorld.prototype = $extend(epistem_omni_graffle_Action.prototype,{
	perform: function(selection,sender) {
		if(selection.solids.length > 0) {
			var solids = selection.solids.concat([]);
			var endY = solids[0].geometry.y + 100;
			Timer.repeating(0.03,function(timer) {
				if(solids[0].geometry.y > endY) {
					timer.cancel();
					return;
				}
				var _g = 0;
				while(_g < solids.length) {
					var solid = solids[_g];
					++_g;
					solid.geometry = solid.geometry.offsetBy(0,10);
				}
			});
			return;
		}
		var canvas = epistem_omni_graffle_Globals.get_document().portfolio.canvases[0];
		if(canvas != null) {
			var layoutInfo = canvas.layoutInfo;
			if(layoutInfo.type == LayoutType.Hierarchical) {
				var dirs = HierarchicalDirection.all;
				var dirIndex = dirs.indexOf(layoutInfo.direction);
				if(dirIndex < dirs.length - 1) {
					layoutInfo.direction = dirs[dirIndex + 1];
					canvas.layout();
					return;
				} else {
					layoutInfo.direction = dirs[0];
				}
			}
			var allTypes = LayoutType.all;
			layoutInfo.type = allTypes[(allTypes.indexOf(layoutInfo.type) + 1) % allTypes.length];
			canvas.layout();
		}
	}
	,validate: function(selection,sender) {
		return true;
	}
});
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

    
	const hxaction = new exports.samples.HelloWorld();
	const action = new PlugIn.Action(function(selection, sender){ hxaction.perform(selection, sender); });
	action.validate = function(selection, sender){ return hxaction.validate(selection, sender); };
	
	return action;
})();    
