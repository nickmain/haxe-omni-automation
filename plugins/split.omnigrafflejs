/*{
	"type": "action",
	"targets": ["omnigraffle"],
	"author": "Nick Main",
	"identifier": "split234234342",
	"version": "0.1",
	"description": "Split Text Lines",
	"label": "Split Lines",
	"paletteLabel": "Split Lines",
    "image": "rectangle.split.1x2.fill"
}*/

(() => {
    var exports = {};

    (function ($hx_exports, $global) { "use strict";
$hx_exports["samples"] = $hx_exports["samples"] || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var epistem_omni_graffle_Action = function() {
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_message: function() {
		return this.message;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var samples_Split = $hx_exports["samples"]["Split"] = function() {
	epistem_omni_graffle_Action.call(this);
};
samples_Split.__super__ = epistem_omni_graffle_Action;
samples_Split.prototype = $extend(epistem_omni_graffle_Action.prototype,{
	perform: function(selection,sender) {
		try {
			var canvas = selection.canvas;
			if(canvas == null) {
				return;
			}
			if(selection.solids.length > 0) {
				var _g = 0;
				var _g1 = selection.solids;
				while(_g < _g1.length) {
					var solid = _g1[_g];
					++_g;
					var text = solid.text;
					var lines = text.split("\n");
					if(lines.length < 2) {
						continue;
					}
					var h = solid.geometry.height / lines.length;
					var w = solid.geometry.width;
					var x = solid.geometry.origin.x + 20;
					var y = solid.geometry.origin.y;
					var _g2 = 0;
					var _g3 = lines.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var newShape = canvas.newShape();
						newShape.text = lines[i];
						newShape.geometry = new Rect(x,y,w,h);
						newShape.shadowColor = null;
						newShape.textWraps = false;
						newShape.fontName = solid.fontName;
						newShape.textSize = solid.textSize;
						newShape.textHorizontalAlignment = solid.textHorizontalAlignment;
						newShape.textVerticalPlacement = solid.textVerticalPlacement;
						y += h + 3;
					}
				}
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			console.log("src/samples/Split.hx:50:",e.get_message());
		}
	}
	,validate: function(selection,sender) {
		return true;
	}
});
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});

    
	const hxaction = new exports.samples.Split();
	const action = new PlugIn.Action(function(selection, sender){ hxaction.perform(selection, sender); });
	action.validate = function(selection, sender){ return hxaction.validate(selection, sender); };
	
	return action;
})();    
